Создание веток (бранчей) и пулл риквестов (pull requests)

Что необходимо для начала:

● Аккаунт на github.com
● git клиент (windows - https://gitforwindows.org/ mac - часть x-code, linux - встроено)
● Репозиторий на github.com, с веткой мастер, например
https://github.com/GITUSERNAME/JavaCourse , который может быть создан с нуля, так
и форкнут у преподавателя
● Если мы форкнули репозиторий, то его нужно склонировать себе на компьютер при
помощи git clone. Не забудьте перейти в папку этого репозитория у себя на
компьютере
● ВАЖНО: Если репозиторий был форкнут - вкладки Issues не будет! Оставить
комментарий мы сможем при открытии pull request

0. Для начала убедимся в GitBash, что мы находимся в рабочей папке, где
находится наш проект и что мы находится на ветке master командой: git status.

1. Создаем новый issue на github.com:
ВАЖНО: Если репозиторий был форкнут - вкладки Issues не будет! Оставить
комментарий мы сможем при открытии pull request
https://github.com/GITUSERNAME/JavaCourse/issues -> зеленая кнопка New Issue
справа.
Вводим заголовок и условие задачи.
2. Создаем новую ветку командой в gitbash
git checkout -b GH-9-temperature-amplitude (Без пробелов)
где GH-9-temperature-amplitude - название ветки, а девятка в GH-9 - номер
созданного в предыдущем пункте issue.
3. Создаем проект в IDE (Eclipse или IntelliJ) и пишем код, как обычно.
4. Когда задача решена, переходим в окно gitbash и смотрим список файлов на
добавление командой git status ,
после чего добавляем файлы командой git add .
И видим, что git зафиксировал изменения git status:
5. После добавления создаем commit, после чего файлы добавлены в локальную
ветку (бранч):
git commit -m “first solution” , где first solution это комментарий.
На этом этапе git должен знать того, кто с ним работает, чтобы
“подписать файлы” и подсказывает, что нужно сделать:
Когда коммит прошел нормально, мы видим следующее ( в вашем
конкретном случае может отличаться):
6. Теперь нужно запушить файлы в удаленной репозиторий на github.com:
git push
так как удаленной ветки не существует, git подсказывает, что команда, скорее
всего, выглядит так:
git push --set-upstream origin GH-9-temperature-amplitude
(кстати, быстрое копирование в gitbash - выделяем строку и нажимаем на
среднюю кнопку мыши, что сразу же вставит эту выделенную строку)
7. Теперь можно открывать pull request: возвращаемся в окно браузера на github.com
в свой репозоторий. Можем сразу сделать пул, так как github сразу подсказывает,
что совсем недавно появилась новая ветка:
Или же сделать все вручную: нажимаем кнопку New Pull Request, выбираем ветки,
ИЗ которой и В которую предлагаем изменения и нажимаем Create pull request:
в открывшемся окне указываем ссылку на изначальный issue.
Если написать #, то выпадет список issues, из которого можно выбрать нужный.
Если вы делали форк репозитория, то issues не будет, но можно оставить
комментарий.
Смело жмем Create pull request
Список файлов и переписка будет видна во вкладке открытого PR:
8. Ссылку на созданный pull request можно (URL из браузера, например
https://github.com/GITHUBUSER/Java_course/pull/2) отправить
преподавателю, если проверка не требуется, то pull request можно слить
(смерджить), в нашем случае из ветки GH-9-temperature-amplitude в
ветку master .
9. Для того, чтобы приступить к работе над следующей задачей, в gitbash выполняем
git checkout master
git pull
это заберет обновленный удаленный мастер в локальную папку, после чего
можно вернуться к шагу 1.

Как обновить репозиторий, который был форкнут:
1) Проверяем связи с начальным репозиторием
$ git remote -v
origin https://github.com/aliaskov/JavaCourse.git (fetch)
origin https://github.com/aliaskov/JavaCourse.git (push)
2) Добавляем новый источник
git remote add upstream https://github.com/sergeylukichev/JavaCourse
3) Обновляем и получаем новые ветки
git fetch upstream
4) Переходим на мастер ветку
git checkout master
5) Сливаем ветки, возможны конфликты, но если повезло и конфликтов нет,
то просто выходим из vi при помощи :x
git merge upstream/master
6) Заливаем это все на github, в свой репозиторий
git push origin master